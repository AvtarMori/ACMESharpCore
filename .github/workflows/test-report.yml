name: Test Report

on:
    push:
        branches:
        - master
        - github-workflow

jobs:
    build:
        strategy:
            matrix:
                os:
                    - 'ubuntu-latest'
#                    - 'windows-latest'

        runs-on: ${{ matrix.os }}
    
        steps:
            - name: Checkout latest
              uses: actions/checkout@v2

            - name: Setup .NET Core
              uses: actions/setup-dotnet@v1
              with:
                dotnet-version: 2.1.*
                
            - name: Install dependencies
              run: dotnet restore
            
            - name: Build
              run: dotnet build --configuration Release --no-restore

            - name: Prepare for Tests
              env:
                TEST_BUCKET_NAME: ${{ secrets.TEST_BUCKET_NAME }}
                TEST_HOSTED_ZONE_ID: ${{ secrets.TEST_HOSTED_ZONE_ID }}
                TEST_AWS_ACCESS_KEY: ${{ secrets.TEST_AWS_ACCESS_KEY }}
                TEST_AWS_SECRET_KEY: ${{ secrets.TEST_AWS_SECRET_KEY }}
              shell: pwsh
              run: |
                $configRoot      = "./test/ACMESharp.IntegrationTests/config"
                $configOutRoot   = [System.IO.Path]::Combine($configRoot, "_IGNORE")
                $configTemplates = [System.IO.Path]::Combine($configRoot, "template-*")
                $configValues    = [System.Environment]::GetEnvironmentVariables()

                if (-not (Test-Path -PathType Container $configOutRoot)) {
                    mkdir $configOutRoot
                }

                ## For each config template, do a @@ENV_VAR@@ substitution
                ## as we write out the realized template to the config dir
                foreach ($f in (dir $configTemplates)) {
                    $fOut = $f.FullName -replace '[\\/]template-','/_IGNORE/'
                    $fBody = [System.IO.File]::ReadAllText($f.FullName)
                    foreach ($k in $configValues.Keys) {
                        $fBody = $fBody -replace "@@$k@@",$configValues[$k]
                    }
                    [System.IO.File]::WriteAllText("$($fOut)", $fBody)
                }

                Set-PSRepository -Name PSGallery -InstallationPolicy Trusted

                Install-Module GitHubActions -Force
                Install-Module AWSPowerShell.NetCore -Force
                Import-Module AWSPowerShell.NetCore -Force
                Set-AWSCredential -StoreAs acmesharp-tests -AccessKey $env:TEST_AWS_ACCESS_KEY -SecretKey $env:TEST_AWS_SECRET_KEY

            - name: Test - Unit Tests
              id: unitTests
              if: ${{ !cancelled() }}
              shell: pwsh
              env:
                GIST_TOKEN: ${{ secrets.GIST_TOKEN }}
              run: |
                dotnet test --no-restore --verbosity normal --results-directory ./_IGNORE --logger "trx;LogFileName=_gh-tests.trx" ./test/ACMESharp.UnitTests
                ./tools/test-report/trx2md.ps1 -trxFile ./_IGNORE/_gh-tests.trx -Verbose

                ipmo GitHubActions
                $gist_token = $env:GIST_TOKEN

                $repo_full_name = Get-ActionInput repo_full_name
                $workflow_name  = Get-ActionInput workflow_name

                if (-not $repo_name) {
                    $repo_full_name = $env:GITHUB_REPOSITORY
                }
                if (-not $workflow_name) {
                    $workflow_name = $env:GITHUB_WORKFLOW
                }

                ($repo_owner, $repo_name) = $repo_full_name -split '/'

                Write-ActionInfo "Resolved Repository..........: [$repo_full_name]"
                Write-ActionInfo "Resolved Repository Owner....: [$repo_owner]"
                Write-ActionInfo "Resolved Repository Name.....: [$repo_name]"
                Write-ActionInfo "Resolved Workflow............: [$workflow_name]"
                
                $reportGistName = "TEST_REPORT:$repo_name"
                Write-ActionInfo "Resolved TEST_REPORT Gist Name.....: [$reportGistName]"

                $gistsApiUrl = "https://api.github.com/gists"
                $apiHeaders = @{
                    Accept        = "application/vnd.github.v2+json"
                    Authorization = "token $gist_token"
                }

                ## Request all Gists for the current user
                $listGistsResp = Invoke-WebRequest -Headers $apiHeaders -Uri $gistsApiUrl

                ## Parse response content as JSON
                $listGists = $listGistsResp.Content | ConvertFrom-Json -AsHashtable
                Write-ActionInfo "Got [$($listGists.Count)] Gists for current account"

                ## Isolate the first Gist with a file matching the expected metadata name
                $reportGist = $listGists | Where-Object { $_.files.$reportGistName } | Select-Object -First 1
                $reportData = [System.IO.File]::ReadAllText("$PWD/./test/ACMESharp.UnitTests/_gh_tests/_gh_tests.md")

                if ($reportGist) {
                    Write-ActionInfo "Found the TEST_REPORT!"

                    $reportDataRawUrl = $reportGist.files.$reportGistName.raw_url
                    Write-ActionInfo "Fetching TEST_REPORT content from Raw Url"

                    $reportDataRawResp = Invoke-WebRequest -Headers $apiHeaders -Uri $reportDataRawUrl
                    $reportDataContent = $reportDataRawResp.Content
                    if (-not $reportData) {
                        Write-ActionWarning "TEST_REPORT content seems to be missing"
                        Write-ActionWarning "[$($reportGist.files.$reportGistName)]"
                        Write-ActionWarning "[$reportDataContent]"
                    }
                    else {
                        Write-Information "Got existing TEST_REPORT"
                    }
                }

                if (-not $reportGist) {
                    Write-ActionInfo "Creating initial TEST_REPORT Gist"
                    $createGistResp = Invoke-WebRequest -Headers $apiHeaders -Uri $gistsApiUrl -Method Post -Body (@{
                        public = $false
                        files = @{
                            $reportGistName = @{
                                content = $reportData
                            }
                        }
                    } | ConvertTo-Json)
                    $createGist = $createGistResp.Content | ConvertFrom-Json -AsHashtable
                    $reportGist = $createGist
                    Write-ActionInfo "Create Response: $createGistResp"
                }
                else {
                    Write-ActionInfo "Updating TEST_REPORT Gist"
                    $updateGistUrl = "$gistsApiUrl/$($reportGist.id)"
                    $updateGistResp = Invoke-WebRequest -Headers $apiHeaders -Uri $updateGistUrl -Method Patch -Body (@{
                        files = @{
                            $reportGistName = @{
                                content = $reportData
                            }
                        }
                    } | ConvertTo-Json)

                    Write-ActionInfo "Update Response: $updateGistResp"
                }
